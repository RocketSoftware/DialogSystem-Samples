
         Browser DSX (dsbrowse)

             Dialog System
     Dialog System Extensions (DSX)

              Data Browser

You can use the cursor keys or mouse to
move around this text, or double click
on items in angle brackets to see more
details about them.

              <Try It Now>

The Data Browser DSX (dsbrowse) provides
you with capabilities to display data
from files or other sources directly in
your Dialog System windows.

You use the CALLOUT dialog function to
access Dialog System Extensions, each
of which have a defined call interface.

See your Dialog System Reference, or the
on-line documentation for more details.

Contents:                         <Exit>

    <About Dialog System Extensions>
    <Calling dsbrowse>
    <DIsplaying data from files>
    <Displaying data from COBOL heaps>
    <Keyboard support>
    <Mouse support>
    <List box emulation>
    <Color support>
    <Font support>
    <Large amounts of data>












About Dialog System Extensions
------------------------------

Dialog System Extensions (DSX) is the
term now used to refer to Dialog System
modules accessed via CALLOUT.  In
Dialog System Professional 2.3, they
were referred to as Canned Dialogs.

Several DSX modules are supplied with
Dialog System 2.5, and more modules may
be added in the future.

The current list of DSX modules
includes:

  -  Call COBOL module      <Dscobcal>
  -  Container (details)    <Dscnr>
  -  Data browser           <Dsbrowse>
  -  Directory browser      <Dsdir>
  -  Move/size window       <Dsmovsz>
  -  Multimedia access      <Dsplayer>
  -  On-line help viewer    <Dsonline>

All of these are documented in the
Dialog System Reference, and On-line.








       <Return to contents page>

Dscobcal DSX: Call COBOL Module

This DSX allows you to call COBOL
routines which are not aware of Dialog
System.  It strips off the Dialog
System parameter block and can
optionally pass parameters BY VALUE.



          <Return to DSX list>

Dscnr DSX: Container Support

This DSX provides limited support for
the container object.  Only details
(column) view is provided.

You may need to purchase additional
software in order to make use of the
container support.

          <Return to DSX list>

Dsbrowse DSX: Data Browser

Allows you to view data from files.  A
demo screenset (viewdemo.gs) is provided
with Dialog System to allow you to view
this file using dsbrowse.

This example also demonstrates many of
the features available with this DSX.

          <Return to DSX list>

Dsdir DSX: Directory Browser

Allows the user to select files, using
the standard file selector for the
environment if there is one.





          <Return to DSX list>

Dsmovsz DSX: Move/Size Windows

Allows you to move and size windows.
You can also make windows minimized or
maximized.

Thie DSX also allows you to move and
size Dialog Boxes, and to maximise
windows without maximise buttons.

          <Return to DSX list>

Dsplayer DSX: Multimedia Support

Allows you to play sound and video
clips within your Dialog System
applications.

You need to have hardware and software
capable of Multimedia installed on your
system.  This DSX runs on Windows only.

          <Return to DSX list>

Dsonline DSX: On-line help viewer

Allows you to incorporate on-line help
into your applications.  You can use
either the On-Line Help
system, or the Windows help system to
display the help.



          <Return to DSX list>













Calling Dsbrowse
----------------

You call the Dsbrowse DSX using the
CALLOUT function from your screenset.
You should not attempt to call this
DSX from COBOL, and it is designed only
to work with Dialog System.

The sequence of operations to call
Dsbrowse is as follows:

1.  Set up any parameter blocks that
    are required.  The parameter blocks
    that you need depend on what
    function you wish to perform.  The
    Dialog System Reference provides
    information for all the available
    calls.

2.  Tell Dialog System which parameters
    you want to pass to the DSX.  You
    do this via the CALLOUT-PARAMETER
    function (you are advised also to
    use the CLEAR-CALLOUT-PARAMETERS
    function, as you may have defined
    other parameters previously).

3.  CALLOUT to the DSX to have the
    requested function performed.

For basic operation, you will need to
call the DSX only once for each file in
your application, as the DSX can now
find out any other information it needs
directly from Dialog System.  With the
version supplied with Dialog System
Professional 2.3, you had to call the
DSX for each event.  This mode is still
supported, but is not covered here.

Refer to later in this document for
an <example>.



       <Return to contents page>

Displaying data from files
--------------------------

Dsbrowse is designed primarily for
displaying data from files, and requires
very little dialog to do this.  If you
require more features, then you can use
these if you supply more parameters.

For new applications, you are advised
to use the 'new' function.  However,
the 'init' and 'heap' functions are
retained for compatibility, but are
not covered here.






               <Example>

       <Return to contents page>

Example:                          <Back>

Here's a simple example which will
display this file in a window (WIN1)

   OPEN-VIEWDEMO-TXT
<1>  MOVE "new" DSBROWSE-FUNCTION(1)
<2>  MOVE-OBJECT-HANDLE WIN1 DSBROWSE-HANDLE-COUNT(1)
<3>  MOVE 1 DSBROWSE-OPTION-FLAGS(1)
<4>  MOVE "$DSGDIR/viewdemo.dat" DSBROWSE-FILENAME(1)
<5>  CALLOUT "dsbrowse" 0 DSBROWSE-PARAMETER-BLOCK

MOVE "new" DSBROWSE-FUNCTION(1)

This sets the function you require from
Dsbrowse.  The 'new' function opens a
new Dsbrowse window.





           <Back to example>

MOVE-OBJECT-HANDLE WIN1 DSBROWSE-HANDLE-COUNT(1)

This tells Dsbrowse where you want it
to create it's window.  Dsbrowse will
take over control of the window and use
all of the available space within it.




           <Back to example>

MOVE 1 DSBROWSE-OPTION-FLAGS(1)

This tells Dsbrowse to process events
automatically.  This is the recommended
mode of operation, as it greatly
simplifies the code needed in your
screenset.  The following flag
combinations are currently possible:

    1 - Automatically process events.
    2 - Emulate list box.
    3 - Both of the above.
    0 - None of the above.

This example program uses flag 3.  The
events are processed automatically, and
list box emulation is used so that you
can click on items to move to other
sections.



           <Back to example>

MOVE "$DSGDIR/viewdemo.dat" DSBROWSE-FILENAME(1)

This line of dialog sets the file that
you want to view.  You can place
environment variables here, as in this
example.




           <Back to example>

CALLOUT "dsbrowse" 0 DSBROWSE-PARAMETER-BLOCK

After setting up all the required
parameters, we can now call Dsbrowse
for it to carry out the requested task.





           <Back to example>

Displaying data from COBOL heaps
--------------------------------

If the data you wish to display is not
in a plain text file, then you can write
the data into a COBOL heap, and get
Dsbrowse to display from there.

For example, you might query a database,
add all the records into a heap, then
call Dsbrowse to display the result.

You do this in much the same way as
you would display data from a file.

For more information, refer to the
Dsbrowse documentation.





       <Return to contents page>

Keyboard support
----------------

Dsbrowse provides sufficient keyboard
support to allow you to move around your
data.  The following keys are available:

    Cursor Up, Down, Left, Right.
    Home, End, Page Up, Page Down

       <Return to contents page>

Mouse support
-------------

When list box emulation is not active,
data can be scrolled via the scroll
bars, but the mouse has no effect on the
data itself.

With the list box emulation active, you
can select items by clicking on them, or
accept them by double-clicking.

If you hold down the mouse button,
moving the mouse will also move the
selection.  Moving the mouse away from
the data will cause the data to scroll -
the further the mouse is moved, the
faster the scrolling.




       <Return to contents page>

List box emulation
------------------

The list box emulation facilities in
Dsbrowse are based on the list box on
Windows 3.1, which is also similar to
list boxes on OS/2 2.1.  In general,
the emulation facilities should be
close to real list boxes on most, if
not all, environments.

You need to set a flag when you start
Dsbrowse in order for it to switch on
list box emulation.

Current features list:
  -  Single selection lists only (this
     may be changed at some point in
     the future).
  -  With automatic event processing
     switched on, Dsbrowse will generate
     list box ITEM-SELECTED and
     ITEM-ACCEPTED events.
  -  Selection line automatically
     colored according to the main
     colors chosen.

If you are viewing this file with the
Viewdemo sample, then you are using the
list box emulation facilities of
Dsbrowse.



       <Return to contents page>

Color support
-------------

Dsbrowse provides you with limited
color support.  You can make locked
rows and columns one color, and unlocked
rows and columns another.

Under OS/2, Windows, and GUI Emulation,
16 different colors are available.
Under Motif, all of the X Windows System
colors are available.

When you are using list box emulation
mode, Dsbrowse will automatically pick
colors for the selection cursor.  This
will usually give satisfactory results,
but some adjustment may be necessary.




       <Return to contents page>

Font support
------------

Dsbrowse allows you to set the font on
each of your Dsbrowse windows.  You can
choose any font available on the system,
but in general, you should avoid
proportional fonts.

You cannot currently use user-defined
font names with Dsbrowse, so you will
need to take care of this yourself.

By default, Dsbrowse sets the windows
to be system monospaced font.  If you
change the font, Dsbrowse will re-draw
the text on the Dsbrowse window.





       <Return to contents page>

Large amounts of data
---------------------

You can have very large amounts of data
in your Dsbrowse window (32,000 lines
with DOS, Windows, and OS/2 products,
and up to a theoretical limit of 4GB
on Unix products.

Before you use such large amounts of
data, however, you should consider
the following:

1)  Does the user really need all the
    data you are presenting?

2)  Is the user likely to be able to
    find what they want in a reasonable
    amount of time?

3)  Is there any way you can reduce the
    amount of data (e.g. by providing
    filters)?

Remember that wading through vast
amounts of data is very time-consuming,
and may put the user off using your
application.






       <Return to contents page>

  /----------------------------------\
 /                                    \
/              Suggestion              \
|                                      |
|   For best results, make this box    |
|   just fill the yellow area of the   |
|   Dsbrowse window, and use the page  |
|   up/down keys to move around.       |
|                                      |
|              <Continue>              |
|                                      |
|______________________________________|
  /----------------------------------\
 /                                    \
/  If you need more examples:          \
|     - take a look at viewdemo.gs     |
|                                      |
|  If you need more information:       |
|     - refer to the Reference Manual  |
|       or the on-line documentation.  |
|                                      |
|                <Exit>                |
|                                      |
|______________________________________|
